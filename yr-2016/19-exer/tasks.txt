1. Functional stuff
  Имплементирайте функция, която сплесква списък от списъци.
    пример:
  [1, 2, 3, 4] -> (1, 2, 3, 4)
  [1, [2, 3], 4] -> (1, 2, 3, 4)
  [1, [1, 1, 1], [2, [3, 4], 5], [6, [7]]] -> (1, 1, 1, 1, 2, 3, 4, 5, 6, 7)
  [[[[]]]] -> ()
  [[[1]]] -> (1)
2. Working with HTTP and HTML
  Напишете програма, която да взима HTML кода на уеб страница, да намира
  картинките в нея и да ги записва локално.
3. Parallel stuff w/ JSON
  Напишете програма, която да взима JSON и по полетата в него да генерира
  съответния код на Perl-ски клас, създаден с Moose. Програмата да има
  възможност да генерира няколко различни класа едновременно.
    пример:
      "Person": {
        "name": { "type": "String", "access": "rw" },
        "age": { "type": "Int", "access": "rw" }
      }
    да генерира следния модул:
      package Person;
      use Moose;

      has 'name' => (is => 'rw', isa => 'String');
      has 'age' => (is => 'rw', isa => 'Int');

      1;

    пример 2:
      "Home": {
        "address": { "type": "String", "access": "rw" },
        "rent": { "type": "Int", "access": "rw" }
      }

      "Person": {
        "name": { "type": "String", "access": "rw" },
        "age": { "type": "Int", "access": "rw" },
        "home": { "type": "Home", "access": "rw" }
      }
    да генерира следния модул:
      package Home;
      use Moose;

      has 'address' => (is => 'rw', isa => 'Str');
      has 'rent' => (is => 'rw', isa => 'Int');

      package Person;
      use Moose;

      use Home;

      has 'name' => (is => 'rw', isa => 'Str');
      has 'age' => (is => 'rw', isa => 'Int');
      has 'home' => (is => 'rw', isa => 'Home');

      1;
5. Async stuff
  Напишете AnyEvent сървър, който слуша за входящи клиентски съобщения и
  потребителски вход едновременно.

  Клиентските съобщения ще са в следния формат:
    [type] [arg1] [arg2] [...]
    Където [type] е типът на операцията, а [argN] е N-тият аргумент на тази
    операция.
    Примерна операция:
      add 2 2 -> Връща сумата на аргументите си
      print hello -> Връща аргументите си

  Потребителските съобщения ще бъдат следните команди:
    stop -> спира AnyEvent сървъра да слуша за клиенти
    start -> пуска AnyEvent сървъра да слуша за клиенти
    restart -> рестартира AnyEvent сървъра
6. Dancer & DBs
  Вдигнете уеб приложение на Dancer, което поддържа логване, регистрация и
  добавяне на бележки от потребител. Информацията за всеки потребител трябва
  да се съхранява в база от данни, чрез която Dancer да си взаимодейства през
  DBI интерфейс.
